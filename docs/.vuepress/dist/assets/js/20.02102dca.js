(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{515:function(e,t,o){"use strict";o.r(t);var a=o(6),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h2",{attrs:{id:"api-integration"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#api-integration"}},[e._v("#")]),e._v(" API integration")]),e._v(" "),o("p",[e._v("To integrate a System X to a System Y, we need to do three things:")]),e._v(" "),o("ul",[o("li",[e._v("Specify the interface of System X")]),e._v(" "),o("li",[e._v("Specify the interface of System Y")]),e._v(" "),o("li",[e._v("Specify how the interface of System X maps to the interface of System Y")])]),e._v(" "),o("p",[o("RouterLink",{attrs:{to:"/airnode/ois.html"}},[e._v("Oracle Integration Specifications (OIS)")]),e._v(" are designed to follow these exact steps:")],1),e._v(" "),o("ul",[o("li",[e._v("API operations are specified")]),e._v(" "),o("li",[e._v("Oracle endpoints are specified")]),e._v(" "),o("li",[e._v("Oracle endpoints are mapped to API operations")])]),e._v(" "),o("p",[e._v("Therefore, the only thing you need to do to integrate an API to Airnode is to create an OIS.\nYou can do this simply by reading the "),o("RouterLink",{attrs:{to:"/airnode/ois.html"}},[e._v("OIS docs")]),e._v(" and creating the OIS for your specific API and use-case.\nThis guide aims to follow a more instructive approach and give some tips along the way.\nMake sure to refer to the "),o("RouterLink",{attrs:{to:"/airnode/ois.html"}},[e._v("OIS docs")]),e._v(" when you need further details, and you can also refer to the "),o("a",{attrs:{href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("OAS 3.0.3 docs"),o("OutboundLink")],1),e._v(" about fields related to API specifications.")],1),e._v(" "),o("h3",{attrs:{id:"ois-template"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#ois-template"}},[e._v("#")]),e._v(" OIS Template")]),e._v(" "),o("p",[e._v("We will be working on the "),o("a",{attrs:{href:"/templates/ois.json"}},[e._v("OIS template")]),e._v(", so first download that and let us go over the notation.\nAn OIS is a "),o("a",{attrs:{href:"https://www.json.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("JSON"),o("OutboundLink")],1),e._v(" file.\nThis guide will assume that you are already familiar with the JSON format, but you can probably work off of the OIS template even if this is the first time you are using it.")]),e._v(" "),o("p",[e._v("In the OIS template, there are some fields that contain "),o("code",[e._v("{FILL_*}")]),e._v(".\nThis means that the value you will be replacing this with is independent from the other fields.\nOn the other hand, if two fields contain the same expression  (e.g., "),o("code",[e._v("{FILL_OPERATION_PARAMETER_1_NAME}")]),e._v("), you must use the same value in them, because they are referencing each other.")]),e._v(" "),o("h3",{attrs:{id:"step-1-specifying-the-api"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#step-1-specifying-the-api"}},[e._v("#")]),e._v(" Step 1: Specifying the API")]),e._v(" "),o("p",[e._v("OIS uses a simplified version of the "),o("a",{attrs:{href:"https://github.com/OAI/OpenAPI-Specification",target:"_blank",rel:"noopener noreferrer"}},[e._v("OpenAPI Specification"),o("OutboundLink")],1),e._v(".\nThis means that if you have the OpenAPI/Swagger specifications of the API that you are going to integrate, you are about 80% done, because you can copy paste entire sections (but make sure that you make the necessary modifications to conform to the OIS format).\nAt the moment, we do not have a tool that converts OpenAPI specifications to OIS automatically.\nIf you would like to help build this, please join the conversation in "),o("a",{attrs:{href:"https://github.com/api3dao/airnode/issues/152",target:"_blank",rel:"noopener noreferrer"}},[e._v("this issue"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("p",[e._v("Let us quickly specify the OIS first:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("oisFormat")]),e._v(": Leave this as "),o("code",[e._v("1.0.0")]),e._v(", which is the current OIS format version.")]),e._v(" "),o("li",[o("code",[e._v("title")]),e._v(": This is the title of your OIS.\nNote that an Airnode can only serve one OIS of the same title.\nTherefore, make sure that you pick a name unique to the integration you are doing.\nFor the purposes of this guide, you can simply use the name of your API.")]),e._v(" "),o("li",[o("code",[e._v("version")]),e._v(": This is the version of this specific OIS, and is for you to be able to version-control your integrations.\nYou are recommended to use "),o("a",{attrs:{href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("semver"),o("OutboundLink")],1),e._v(" for this, so your initial version could be "),o("code",[e._v("0.1.0")]),e._v(".")])]),e._v(" "),o("p",[e._v("Now we can move on to specifying the API under "),o("code",[e._v("apiSpecifications")]),e._v(".\nThis guide will continue assuming you do not have the OpenAPI specifications of the API that you will be integrating.")]),e._v(" "),o("h4",{attrs:{id:"base-url"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#base-url"}},[e._v("#")]),e._v(" Base URL")]),e._v(" "),o("p",[e._v("The first step of specifying your API is to enter its base URL under "),o("code",[e._v("apiSpecifications.servers.0.url")]),e._v(", but let us talk about base URLs and paths before that.\nSay this is the full URL you want the API calls to be made to:")]),e._v(" "),o("div",{staticClass:"language- line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("https://www.myapi.com/v1/getdata\n")])]),e._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[e._v("1")]),o("br")])]),o("p",[e._v("There are two ways to segment this:")]),e._v(" "),o("div",{staticClass:"language- line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("Base URL: https://www.myapi.com\npath:     /v1/getdata\n")])]),e._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[e._v("1")]),o("br"),o("span",{staticClass:"line-number"},[e._v("2")]),o("br")])]),o("p",[e._v("or")]),e._v(" "),o("div",{staticClass:"language- line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("Base URL: https://www.myapi.com/v1\npath:     /getdata\n")])]),e._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[e._v("1")]),o("br"),o("span",{staticClass:"line-number"},[e._v("2")]),o("br")])]),o("p",[e._v("because the call will be made to "),o("code",[e._v("base URL+path")]),e._v(", and thus both will result in the same full URL.")]),e._v(" "),o("p",[e._v("Set your base URL as the section of the full URL that you expect to be shared by all operations.\nIn the example above, we would recommend using "),o("code",[e._v("https://www.myapi.com")]),e._v(", in case additional paths starting with "),o("code",[e._v("/v2")]),e._v(" get added to the API in the future.\nAs you can tell, API integration requires many subjective choices, and is more art than science.")]),e._v(" "),o("h4",{attrs:{id:"paths"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#paths"}},[e._v("#")]),e._v(" Paths")]),e._v(" "),o("p",[e._v("An API operation is specified by a path and a method.\nFor example:")]),e._v(" "),o("div",{staticClass:"language- line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("path:     /v1/getdata\nmethod:   GET\n")])]),e._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[e._v("1")]),o("br"),o("span",{staticClass:"line-number"},[e._v("2")]),o("br")])]),o("p",[e._v("Here, "),o("code",[e._v("GET")]),e._v(" refers to an "),o("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods",target:"_blank",rel:"noopener noreferrer"}},[e._v("HTTP request method"),o("OutboundLink")],1),e._v(".\nThis implies that we could have had another API operation that can be specified as:")]),e._v(" "),o("div",{staticClass:"language- line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("path:     /v1/getdata\nmethod:   POST\n")])]),e._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[e._v("1")]),o("br"),o("span",{staticClass:"line-number"},[e._v("2")]),o("br")])]),o("p",[e._v("Then, a path is not enough to specify an operation by itself, we must also provide its method.")]),e._v(" "),o("p",[e._v("In the OIS template, we have a "),o("code",[e._v("paths")]),e._v(" object with a single element.\nThis means that the OIS template specifies only one API operation, but you can have more simply by adding more elements to that object.\nThe name of the element (denoted as "),o("code",[e._v("{FILL_PATH}")]),e._v(") should be replaced with the path (e.g., "),o("code",[e._v("/v1/getdata")]),e._v(").\nSimilarly, "),o("code",[e._v("{FILL_METHOD}")]),e._v(" should be replaced with the method of the operation you want to integrate (e.g., "),o("code",[e._v("GET")]),e._v(").")]),e._v(" "),o("h5",{attrs:{id:"path-parameters"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#path-parameters"}},[e._v("#")]),e._v(" Path parameters")]),e._v(" "),o("p",[e._v("Some API operations have path parameters such as the following")]),e._v(" "),o("div",{staticClass:"language- line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("/price/{coinId}\n")])]),e._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[e._v("1")]),o("br")])]),o("p",[e._v("This means that calling the "),o("code",[e._v("/price/ethereum")]),e._v(" path will return the Ethereum price, calling the "),o("code",[e._v("/price/bitcoin")]),e._v(" path will return the Bitcoin price, etc.")]),e._v(" "),o("p",[e._v("These path parameters are given in curly braces in the path, and must also be defined as "),o("a",{attrs:{href:"#operation-parameters"}},[e._v("operation parameters")]),e._v(" with the same "),o("code",[e._v("name")]),e._v(", and their "),o("code",[e._v("in")]),e._v(" field defined as "),o("code",[e._v("path")]),e._v(".\nA request that maps to this operation and does not define this path parameter will be errored.")]),e._v(" "),o("h5",{attrs:{id:"operation-parameters"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#operation-parameters"}},[e._v("#")]),e._v(" Operation parameters")]),e._v(" "),o("p",[e._v("After specifying the path and method of an operation, the final step is to specify its parameters.\nEach parameter is an object in "),o("code",[e._v("apiSpecifications.path.{PATH}.{METHOD}.parameters")]),e._v(", with the fields "),o("code",[e._v("in")]),e._v(" and "),o("code",[e._v("name")]),e._v(".\n"),o("code",[e._v("in")]),e._v(" tells where the parameter goes in the HTTP request to the API, and "),o("code",[e._v("name")]),e._v(" tells the name that the parameter value will be sent under.")]),e._v(" "),o("p",[e._v("Note that you do not have to specify all operation parameters, but only the ones that you want the on-chain requester to be able to provide (see "),o("a",{attrs:{href:"#parameters"}},[e._v("endpoint parameters")]),e._v("), and the ones that you want to hardcode a value to (see "),o("a",{attrs:{href:"#fixedoperationparameters"}},[e._v("fixed operation parameters")]),e._v(").")]),e._v(" "),o("h4",{attrs:{id:"security-schemes"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#security-schemes"}},[e._v("#")]),e._v(" Security schemes")]),e._v(" "),o("p",[e._v("As a final step, we need to specify the security schemes of the API.\nUsually, this means telling Airnode where the API key goes, and under what name.\nNote that we will not be entering the API key itself in the OIS, because the OIS is not meant to include any user-specific information.\nSecurity credentials such as API keys go in "),o("RouterLink",{attrs:{to:"/airnode/security-json.html"}},[o("code",[e._v("security.json")])]),e._v(".")],1),e._v(" "),o("p",[e._v("First, name the security scheme by replacing "),o("code",[e._v("{FILL_SECURITY_SCHEME_NAME}")]),e._v(" under "),o("code",[e._v("apiSpecifications.components.securitySchemes")]),e._v(".\nNote that you will also need to use the same name under "),o("code",[e._v("apiSpecifications.security")]),e._v(".\nMake sure to choose a descriptive name, such as "),o("code",[e._v("myapi_apikey")]),e._v(".\nThis name will also be referred to in "),o("RouterLink",{attrs:{to:"/airnode/security-json.html"}},[o("code",[e._v("security.json")])]),e._v(".")],1),e._v(" "),o("p",[e._v("Next, fill in "),o("code",[e._v("type")]),e._v(", "),o("code",[e._v("name")]),e._v(" and "),o("code",[e._v("in")]),e._v(" by referring to the "),o("RouterLink",{attrs:{to:"/airnode/ois.html#42-components"}},[o("code",[e._v("components")]),e._v(" section of OIS")]),e._v(".\n"),o("a",{attrs:{href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#securitySchemeObject",target:"_blank",rel:"noopener noreferrer"}},[e._v("OAS 3.0.3 docs"),o("OutboundLink")],1),e._v(" is also a good source for further details.")],1),e._v(" "),o("p",[e._v("As noted above, make sure to insert the name of your security scheme under "),o("code",[e._v("apiSpecifications.security")]),e._v(".\nFurthermore, similar to API operations, you can use multiple security schemes simply by duplicating the one provided in the OIS template (e.g., an API key goes in the header, and an additional user ID goes in the query).\nSimilarly, if the API you are integrating is publicly accessible, you can remove all security schemes.")]),e._v(" "),o("p",[e._v("Congratulations, you have just specified your API operations!\nNow let us move on to the part that will be exposed to the chain.")]),e._v(" "),o("h3",{attrs:{id:"step-2-specifying-the-endpoints"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#step-2-specifying-the-endpoints"}},[e._v("#")]),e._v(" Step 2: Specifying the endpoints")]),e._v(" "),o("p",[e._v("An endpoint is a service that Airnode exposes to on-chain clients.\nIt maps to an API operation, but the nature of this mapping is customizable.\nThen, it is the integrator's job to define what this service is.")]),e._v(" "),o("p",[e._v("For example, if your API operation returns an asset price given its ticker (e.g., "),o("code",[e._v("BTC")]),e._v("), you can specify the endpoint such that the requester provides the ticker as a parameter.\nThe resulting endpoint would be a general one that returns prices for any kind of asset.\nOn the other hand, you can hardcode "),o("code",[e._v("BTC")]),e._v(" as the asset whose price will be returned (using "),o("a",{attrs:{href:"#fixedoperationparameters"}},[e._v("fixed operation parameters")]),e._v("), which would make your endpoint a specific one that only returns the BTC price.")]),e._v(" "),o("p",[e._v("The recommended endpoint definition pattern is to create an endpoint for each API operation, and allow the requesters to provide all operation parameters themselves.\nThis results in optimal flexibility, and essentially allows the requesters to use the entire API functionality on-chain.\nNormally, oracle integrations strive to hardcode as many API parameters as possible because passing these parameters on-chain results in a gas cost overhead.\nHowever, the Airnode protocol uses "),o("RouterLink",{attrs:{to:"/request-response-protocol/template.html"}},[e._v("templates")]),e._v(" (not to be confused with the OIS template we are using for this guide), which allow requesters to specify a large number of endpoint parameters at no additional gas cost.")],1),e._v(" "),o("p",[e._v("Note that there are some cases where you may not want to map endpoints to API operations one-to-one.\nFor example, the API operation may have a parameter, "),o("code",[e._v("responseFormat")]),e._v(", that can take the values "),o("code",[e._v("JSON")]),e._v("/"),o("code",[e._v("XML")]),e._v(" and determines in which format the API will respond to the call.\nAirnode expects responses to be in JSON format, and thus hardcoding this parameter as "),o("code",[e._v("JSON")]),e._v(" would be more suitable than letting the requester decide, as there is only one valid choice.\nAgain, the integrator's job is to be aware of these subtleties and use judgement.")]),e._v(" "),o("p",[e._v("After this brief detour, let us get back to filling in our OIS template.")]),e._v(" "),o("p",[o("code",[e._v("endpoints")]),e._v(" is a list, with each endpoint represented as an object under it.\nIn the OIS template, there is only one endpoint defined but you can add more, just like the API operations.\nThe first field you need to fill in is "),o("code",[e._v("name")]),e._v(".\nMake sure that it is descriptive, and that multiple endpoints do not have the same name.\nIf you are integrating API operations to endpoints one-to-one, using the API operation path as the endpoint name is a decent choice (i.e., the endpoint "),o("code",[e._v("name")]),e._v(" would be "),o("code",[e._v("/v1/getdata")]),e._v(").\nNote that you would also add the method to this name if there were multiple operations with different methods for a single path.")]),e._v(" "),o("p",[e._v("The next step is to fill in "),o("code",[e._v("endpoints.*.operation")]),e._v(".\nHere, you need to enter the "),o("code",[e._v("path")]),e._v(" and "),o("code",[e._v("method")]),e._v(" of an API operation you have defined in "),o("code",[e._v("apiSpecifications.paths")]),e._v(", which means that requests to this endpoint will have the Airnode call the respective API operation.")]),e._v(" "),o("h4",{attrs:{id:"fixedoperationparameters"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#fixedoperationparameters"}},[e._v("#")]),e._v(" "),o("code",[e._v("fixedOperationParameters")])]),e._v(" "),o("p",[e._v("It is common to need to hardcode API parameters (recall the "),o("code",[e._v("JSON")]),e._v("/"),o("code",[e._v("XML")]),e._v(' example above).\nWe call such hardcoded parameters "fixed operation parameters".')]),e._v(" "),o("p",[e._v("In the OIS template, we have one fixed operation parameter under "),o("code",[e._v("endpoints.*.fixedOperationParameters")]),e._v(", and it refers to the first operation parameter.\nThis means that whenever the Airnode receives a request for this endpoint, the respective API call will be made with that operation parameter set to "),o("code",[e._v("endpoints.*.fixedOperationParameters.*.value")]),e._v(".")]),e._v(" "),o("p",[e._v("An endpoint can have multiple fixed operation parameters.\nAn operation parameter cannot be both in "),o("code",[e._v("fixedOperationParameters")]),e._v(" and "),o("code",[e._v("parameters")]),e._v(".")]),e._v(" "),o("h4",{attrs:{id:"reservedparameters"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#reservedparameters"}},[e._v("#")]),e._v(" "),o("code",[e._v("reservedParameters")])]),e._v(" "),o("p",[e._v('The requester can provide some parameters that are not mapped to API operation parameters.\nThese parameters are called "reserved parameters", and their names start with an underscore.\nSee the '),o("RouterLink",{attrs:{to:"/airnode/ois.html#54-reservedParameters"}},[e._v("related OIS docs")]),e._v(" for more information.")],1),e._v(" "),o("p",[e._v("The current list of reserved parameters are "),o("code",[e._v("_type")]),e._v(", "),o("code",[e._v("_path")]),e._v(" and "),o("code",[e._v("_times")]),e._v(".\nSee the "),o("RouterLink",{attrs:{to:"/airnode/reserved-parameters.html"}},[e._v("reserved parameters guide")]),e._v(" to see what each of these parameters are for.\nIn most cases, all three should be defined as reserved parameters with no fixed/default values, as doing so provides the requester with the most flexibility.")],1),e._v(" "),o("h4",{attrs:{id:"parameters"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[e._v("#")]),e._v(" "),o("code",[e._v("parameters")])]),e._v(" "),o("p",[e._v("Endpoint parameters map to API operation parameters that the requester is allowed to provide values for.\nIt refers to an API operation (similar to a fixed operation parameter) through its field "),o("code",[e._v("operationParameter")]),e._v(".\nYou can also provide "),o("code",[e._v("default")]),e._v(" values for endpoint parameters, though this is not recommended in most cases.")]),e._v(" "),o("p",[e._v("Endpoint parameters have a "),o("code",[e._v("name")]),e._v(" field, which does not have to be the same as the API operation parameter that they map to.\nAs a separate note, an endpoint can have multiple parameters.")]),e._v(" "),o("h3",{attrs:{id:"conclusion"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion")]),e._v(" "),o("p",[e._v("This was all!\nWe specified the API operations and endpoints.\nEach endpoint maps to an API operation, and each endpoint parameter maps to an API operation parameter.\nThe resulting OIS includes no user-specific information, which means that you can share it for others to easily provide the same services (for example, to set up a third-party oracle network).")]),e._v(" "),o("p",[e._v("Note that there was some subjectivity while defining the endpoints.\nThis means that two different OISes can exist for the same exact API, differing based on how the integrators designed the interface that the requester will use.\nHowever, in most cases, one would simply map API operations to endpoints directly, and let the requester provide all API operation parameters through the endpoint parameters.\nAt the moment, we do not have a tool that generates an "),o("code",[e._v("endpoints")]),e._v(" list that maps to "),o("code",[e._v("apiSpecifications.paths")]),e._v(" one-to-one.\nIf you would like to help build this, please join the conversation in "),o("a",{attrs:{href:"https://github.com/api3dao/airnode/issues/153",target:"_blank",rel:"noopener noreferrer"}},[e._v("this issue"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("h2",{attrs:{id:"configuring-airnode"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#configuring-airnode"}},[e._v("#")]),e._v(" Configuring Airnode")]),e._v(" "),o("p",[e._v("Users configure their Airnodes by providing a "),o("code",[e._v("config.json")]),e._v(" and a "),o("code",[e._v("security.json")]),e._v(" file during deployment/redeployment.\n"),o("code",[e._v("config.json")]),e._v(" specifies the API–oracle integration specifications in the form of "),o("RouterLink",{attrs:{to:"/airnode/ois.html"}},[e._v("OIS")]),e._v("es, but also user-specific configuration details.\n"),o("code",[e._v("security.json")]),e._v(" includes security credentials such as API keys.\nBoth "),o("RouterLink",{attrs:{to:"/airnode/config-json.html"}},[o("code",[e._v("config.json")])]),e._v(" and "),o("RouterLink",{attrs:{to:"/airnode/security-json.html"}},[o("code",[e._v("security.json")])]),e._v(" formats are documented, which you can follow to create these files.\nThis guide aims to follow a more instructive approach and give some tips along the way.")],1),e._v(" "),o("p",[e._v("We assume that you have already followed the "),o("RouterLink",{attrs:{to:"/provider-guides/api-integration.html"}},[e._v("API integration guide")]),e._v(" and created your OIS.\nSimilar to the "),o("a",{attrs:{href:"/templates/ois.json"}},[e._v("OIS template")]),e._v(" we have provided in the previous guide, we have a "),o("a",{attrs:{href:"/templates/config.json"}},[o("code",[e._v("config.json")]),e._v(" template")]),e._v(" and a "),o("a",{attrs:{href:"/templates/security.json"}},[o("code",[e._v("security.json")]),e._v(" template")]),e._v(" for this guide.\nDownload these files and see the "),o("RouterLink",{attrs:{to:"/provider-guides/api-integration.html#ois-template"}},[e._v("template notation information")]),e._v(".")],1),e._v(" "),o("h3",{attrs:{id:"creating-config-json"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#creating-config-json"}},[e._v("#")]),e._v(" Creating "),o("code",[e._v("config.json")])]),e._v(" "),o("p",[e._v("As you can see in the template, "),o("code",[e._v("config.json")]),e._v(" has 4 fields:")]),e._v(" "),o("ol",[o("li",[o("code",[e._v("ois")])]),e._v(" "),o("li",[o("code",[e._v("triggers")])]),e._v(" "),o("li",[o("code",[e._v("nodeSettings")])]),e._v(" "),o("li",[o("code",[e._v("id")])])]),e._v(" "),o("h4",{attrs:{id:"ois"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#ois"}},[e._v("#")]),e._v(" "),o("code",[e._v("ois")])]),e._v(" "),o("p",[o("code",[e._v("ois")]),e._v(" is a list OIS objects that Airnode will be serving.\nThis means that a single instance of an Airnode can serve multiple APIs.\nYou can simply copy paste OISes that you will be serving into the "),o("code",[e._v("ois")]),e._v(" list.")]),e._v(" "),o("h4",{attrs:{id:"triggers"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#triggers"}},[e._v("#")]),e._v(" "),o("code",[e._v("triggers")])]),e._v(" "),o("p",[o("code",[e._v("triggers")]),e._v(" allow you to expose the endpoints in your OIS selectively.\nFor example, your OIS may include 10 endpoints, but you may only want to serve 2.\nInstead of modifying the OIS, you would simply create triggers for the 2.\nSimilarly, you may want to serve an endpoint through the request–response protocol, but not the pub–sub protocol.\nIn that case, you would only create the trigger for the request–response protocol.")]),e._v(" "),o("p",[e._v("Note that at this stage, only the request–response protocol is implemented.\nYou can list the endpoints that you want to serve under "),o("code",[e._v("triggers.request")]),e._v(".\nIn most cases, you would create a trigger for each endpoint in your OIS.")]),e._v(" "),o("p",[e._v("Each trigger has an "),o("code",[e._v("oisTitle")]),e._v(" and "),o("code",[e._v("endpointName")]),e._v(" that allow you to refer to one of the endpoints in one of the OISes.\nFill these in accordingly.\n"),o("code",[e._v("endpointId")]),e._v(" is the ID that the requester will use in their on-chain requests to refer to this specific trigger.\nAs a convention, we recommend this to be chosen as the Keccak256 hash of "),o("code",[e._v("{oisTitle}/{endpointName}")]),e._v(".\nIn JS (using ethers.js):")]),e._v(" "),o("div",{staticClass:"language-js line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-js"}},[o("code",[e._v("endpointId "),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" ethers"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("utils"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("keccak256")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("ethers"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("utils"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("defaultAbiCoder"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("encode")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),o("span",{pre:!0,attrs:{class:"token string"}},[e._v("'string'")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),o("span",{pre:!0,attrs:{class:"token template-string"}},[o("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")]),o("span",{pre:!0,attrs:{class:"token interpolation"}},[o("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[e._v("${")]),e._v("oisTitle"),o("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[e._v("}")])]),o("span",{pre:!0,attrs:{class:"token string"}},[e._v("/")]),o("span",{pre:!0,attrs:{class:"token interpolation"}},[o("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[e._v("${")]),e._v("endpointName"),o("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[e._v("}")])]),o("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")])]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[e._v("1")]),o("br")])]),o("p",[e._v("You can also use "),o("a",{attrs:{href:"https://github.com/api3dao/airnode/tree/master/packages/admin#derive-endpoint-id",target:"_blank",rel:"noopener noreferrer"}},[o("code",[e._v("@api3/airnode-admin")]),o("OutboundLink")],1),e._v(" to derive endpoint IDs according to this convention.\nHowever, you can set "),o("code",[e._v("endpointId")]),e._v(" to an arbitrary "),o("code",[e._v("bytes32")]),e._v(" value (e.g., "),o("code",[e._v("0x0000000000000000000000000000000000000000000000000000000000000123")]),e._v("), and as long as the requester uses the same "),o("code",[e._v("endpointId")]),e._v(" while making requests to this endpoint, it will work fine.\nIf you are not using the recommended convention, make sure that your endpoints have different IDs.")]),e._v(" "),o("h4",{attrs:{id:"nodesettings"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#nodesettings"}},[e._v("#")]),e._v(" "),o("code",[e._v("nodeSettings")])]),e._v(" "),o("p",[o("code",[e._v("nodeSettings")]),e._v(" are node-specific configuration parameters.\nThe first of these is "),o("code",[e._v("providerIdShort")]),e._v(", which is used as a label by the deployer to detect previous deployments.\nTherefore, you must not have the "),o("code",[e._v("providerIdShort")]),e._v(" field in your "),o("code",[e._v("config.json")]),e._v(" during the first deployment.\nOn the other hand, you must have it for the following redeployments.\nYou can find your "),o("code",[e._v("providerIdShort")]),e._v(" in the receipt file outputted after deployment.\nThis guide assumes that you have not deployed Airnode yet, so we did not include the "),o("code",[e._v("providerIdShort")]),e._v(" field in the "),o("code",[e._v("config.json")]),e._v(" template.")]),e._v(" "),o("p",[o("code",[e._v("nodeVersion")]),e._v(" indicates which node version this "),o("code",[e._v("config.json")]),e._v(" is prepared for.\nSince the "),o("code",[e._v("config.json")]),e._v(" format can be expected to change with node versions, using a "),o("code",[e._v("config.json")]),e._v(" prepared for one Airnode version with another may result in unexpected issues.\nThe current node version is "),o("code",[e._v("0.1.0")]),e._v(", so you can leave it as such.")]),e._v(" "),o("p",[o("code",[e._v("cloudProvider")]),e._v(" indicates to the deployer which cloud provider Airnode should be deployed at.\nThe deployer currently supports AWS, so you can leave this value as "),o("code",[e._v("aws")]),e._v(".\nWe are planning to extend the deployer to support a wide variety of cloud providers.\nIf you would like to contribute, please join the conversation in "),o("a",{attrs:{href:"https://github.com/api3dao/airnode/issues/154",target:"_blank",rel:"noopener noreferrer"}},[e._v("this issue"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("p",[o("code",[e._v("region")]),e._v(" can be seen as an extension of "),o("code",[e._v("cloudProvider")]),e._v(", it refers to which region of the cloud provider Airnode will be deployed at.\nAn example value would be "),o("code",[e._v("us-east-1")]),e._v(".\nNote that transferring a deployment from one region to the other is not trivial at this moment (i.e., it does not take one command like deployment, but rather three).\nTherefore, try to pick a region and stick to it for this specific deployment.\nIf you would like to contribute to related tooling, please join the conversation in "),o("a",{attrs:{href:"https://github.com/api3dao/airnode/issues/155",target:"_blank",rel:"noopener noreferrer"}},[e._v("this issue"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("p",[o("code",[e._v("stage")]),e._v(" allows you to deploy multiple Airnodes with the same provider ID.\nFor example, the provider may deploy one Airnode with the stage "),o("code",[e._v("api3")]),e._v(" to serve API3 dAPIs, and one with the stage "),o("code",[e._v("public")]),e._v(" that serves the public.\nA regular user will have a single deployment, so feel free to set any descriptive name as your "),o("code",[e._v("stage")]),e._v(".\nAnd finally, you probably want your "),o("code",[e._v("logFormat")]),e._v(" to be set to "),o("code",[e._v("json")]),e._v(" for your Airnode to log in JSON.")]),e._v(" "),o("h5",{attrs:{id:"nodesettings-chains"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#nodesettings-chains"}},[e._v("#")]),e._v(" "),o("code",[e._v("nodeSettings.chains")])]),e._v(" "),o("p",[e._v("An Airnode can serve multiple chains simultaneously.\nYou can specify each of these chains under "),o("code",[e._v("nodeSettings.chains")]),e._v(" as an object.")]),e._v(" "),o("p",[e._v("You should set the ID of the chain in "),o("code",[e._v("id")]),e._v(" (e.g., "),o("code",[e._v("3")]),e._v(" for Ropsten testnet).\n"),o("code",[e._v("type")]),e._v(" is the type of the chain, and only "),o("code",[e._v("evm")]),e._v(" is supported at the moment.")]),e._v(" "),o("p",[e._v("Airnode can use multiple Ethereum providers per chain.\nThese can both be your private Ethereum node, or an Ethereum service provider such as Infura.\nAccordingly, the "),o("code",[e._v("providers")]),e._v(" field is list.\nEnter the "),o("code",[e._v("name")]),e._v(" (to be used in logs) and the "),o("code",[e._v("url")]),e._v(" of the Ethereum provider as an object.")]),e._v(" "),o("p",[o("code",[e._v("contracts")]),e._v(" contains the addresses of the contracts that implement the Airnode protocols.\nAlthough you can deploy these contracts yourself, you are recommended to use the ones that were deployed by API3.\nYou can find them "),o("a",{attrs:{href:"https://github.com/api3dao/airnode/tree/master/packages/protocol/deployments",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("p",[o("code",[e._v("providerAdminForRecordCreation")]),e._v(" is the address that your Airnode will set as the "),o("RouterLink",{attrs:{to:"/request-response-protocol/provider.html#provideradmin"}},[e._v("provider admin")]),e._v(" while creating the provider record on the respective chain.\nYou should set this field to an address that only you control.")],1),e._v(" "),o("h4",{attrs:{id:"id"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#id"}},[e._v("#")]),e._v(" "),o("code",[e._v("id")])]),e._v(" "),o("p",[o("code",[e._v("config.json")]),e._v(" has an "),o("code",[e._v("id")]),e._v(" field, which identifies the specific configuration.\nFurthermore, "),o("code",[e._v("security.json")]),e._v(" has the same field with the identical value, allowing the deployer to verify that the two files match.\nFor this to work, you are recommended to choose a unique value for this field for each "),o("code",[e._v("config.json")]),e._v("/"),o("code",[e._v("security.json")]),e._v(" you create (e.g., use a UUID).")]),e._v(" "),o("h3",{attrs:{id:"creating-security-json"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#creating-security-json"}},[e._v("#")]),e._v(" Creating "),o("code",[e._v("security.json")])]),e._v(" "),o("p",[o("code",[e._v("security.json")]),e._v(" is where we will store our API keys.\nMake sure to download the "),o("a",{attrs:{href:"/templates/security.json"}},[o("code",[e._v("security.json")]),e._v(" template")]),e._v(" and refer to the "),o("RouterLink",{attrs:{to:"/airnode/security-json.html"}},[e._v("docs")]),e._v(" as needed.")],1),e._v(" "),o("p",[e._v("For each security scheme you have defined in your "),o("code",[e._v("config.json")]),e._v(", you need to create an entry in "),o("code",[e._v("security.json")]),e._v(" that includes its value.\nFeel free to duplicate the OIS entries under "),o("code",[e._v("apiCredentials")]),e._v(" or security scheme entries under these OIS entries as needed.\nFinally, make sure that you use the same "),o("code",[e._v("id")]),e._v(" that you have used in "),o("code",[e._v("config.json")]),e._v(".")]),e._v(" "),o("h3",{attrs:{id:"conclusion-2"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#conclusion-2"}},[e._v("#")]),e._v(" Conclusion")]),e._v(" "),o("p",[e._v("In this guide, we created the "),o("code",[e._v("config.json")]),e._v(" and "),o("code",[e._v("security.json")]),e._v(" files required to deploy our Airnode.\nNote that "),o("code",[e._v("config.json")]),e._v(" is user-specific, so your "),o("code",[e._v("config.json")]),e._v(" file is probably of not much use to others.\nFurthermore, it contains your Ethereum provider URLs, which tend to include security credentials/keys.\nYour "),o("code",[e._v("security.json")]),e._v(" contains your API keys, so it should definitely be kept secret.\nTherefore, even though you can safely share your OIS, you should avoid publishing your configuration files/pushing them to repos.")]),e._v(" "),o("p",[e._v("Now that we have our Airnode configuration files, the next step is deployment.")]),e._v(" "),o("h2",{attrs:{id:"deploying-airnode"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#deploying-airnode"}},[e._v("#")]),e._v(" Deploying Airnode")]),e._v(" "),o("p",[e._v("After "),o("RouterLink",{attrs:{to:"/provider-guides/api-integration.html"}},[e._v("integrating your API")]),e._v(" and "),o("RouterLink",{attrs:{to:"/provider-guides/configuring-airnode.html"}},[e._v("creating the configuration files")]),e._v(", the next step is to deploy your Airnode.\nAirnode comes with a "),o("a",{attrs:{href:"https://github.com/api3dao/airnode/tree/master/packages/deployer",target:"_blank",rel:"noopener noreferrer"}},[e._v("deployer"),o("OutboundLink")],1),e._v(", which uses "),o("a",{attrs:{href:"https://www.terraform.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Terraform"),o("OutboundLink")],1),e._v(" and "),o("a",{attrs:{href:"https://www.serverless.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Serverless Framework"),o("OutboundLink")],1),e._v(" to automate the entire deployment process.\nThis deployer is also containerized as a "),o("a",{attrs:{href:"https://www.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker"),o("OutboundLink")],1),e._v(" image, which allows you to deploy your Airnode on any platform without worrying about installing dependencies.\nSo let's begin!")],1),e._v(" "),o("h3",{attrs:{id:"installing-docker"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#installing-docker"}},[e._v("#")]),e._v(" Installing Docker")]),e._v(" "),o("p",[e._v("The upside of containerizing the deployer is that you only need to install Docker.\nThe downside is that you need to install Docker.\nGo to the "),o("a",{attrs:{href:"https://docs.docker.com/get-docker/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker website"),o("OutboundLink")],1),e._v(" and install it first.")]),e._v(" "),o("h3",{attrs:{id:"creating-cloud-credentials"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#creating-cloud-credentials"}},[e._v("#")]),e._v(" Creating cloud credentials")]),e._v(" "),o("p",[e._v("The deployer interacts with your cloud provider to deploy Airnode programmatically, without requiring you to click through a lot of ever-changing graphical interfaces.\nFor it to be able to do that, you need to give it permission.")]),e._v(" "),o("p",[e._v("To be able to do this, you need to create a new user in your AWS account, give it programmatic access, retrieve its access key ID and secret access keys, and feed these to the deployer.\nFortunately, this is not nearly as complicated as it sounds.\nFollow "),o("a",{attrs:{href:"https://www.youtube.com/watch?v=KngM5bfpttA",target:"_blank",rel:"noopener noreferrer"}},[e._v("this video"),o("OutboundLink")],1),e._v(", get your keys, and put them in a file named "),o("code",[e._v(".env")]),e._v(" as below (values are made up, you need to replace these with your own):")]),e._v(" "),o("div",{staticClass:"language- line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("AWS_ACCESS_KEY_ID=JSDYNDRUA1XAF2W3UGPA\nAWS_SECRET_KEY=q4JiOfPP4wQOuRj01/6/7RAodTAg6lFb99IoB4XH\n")])]),e._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[e._v("1")]),o("br"),o("span",{staticClass:"line-number"},[e._v("2")]),o("br")])]),o("p",[e._v("Here is an "),o("a",{attrs:{href:"https://github.com/api3dao/airnode/blob/master/packages/deployer/.env.example",target:"_blank",rel:"noopener noreferrer"}},[e._v("example file"),o("OutboundLink")],1),e._v(" that is left blank.\nMake sure that you do not push your credentials to a repository or leave them around!\nThese credentials can be used to gain access to your Airnode's private key.")]),e._v(" "),o("h3",{attrs:{id:"deployment"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#deployment"}},[e._v("#")]),e._v(" Deployment")]),e._v(" "),o("p",[e._v("Get the "),o("code",[e._v("config.json")]),e._v(" and "),o("code",[e._v("security.json")]),e._v(" files you have created while "),o("RouterLink",{attrs:{to:"/provider-guides/configuring-airnode.html"}},[e._v("configuring your Airnode")]),e._v(", your "),o("code",[e._v(".env")]),e._v(" file with your "),o("a",{attrs:{href:"#creating-cloud-credentials"}},[e._v("cloud provider credentials")]),e._v(", and place these three files in the same directory.\nThen, in this same directory, run the following command (if you are on Windows, use CMD, replace "),o("code",[e._v("\\")]),e._v(" with "),o("code",[e._v("^")]),e._v(", "),o("code",[e._v("$(pwd)")]),e._v(" with "),o("code",[e._v("%cd%")]),e._v("):")],1),e._v(" "),o("div",{staticClass:"language-sh line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-sh"}},[o("code",[e._v("docker run -it --rm "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --env-file .env "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --env "),o("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("COMMAND")]),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("deploy-first-time "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  -v "),o("span",{pre:!0,attrs:{class:"token variable"}},[o("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),o("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("pwd")]),o("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(":/airnode/out "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  api3/airnode:latest\n")])]),e._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[e._v("1")]),o("br"),o("span",{staticClass:"line-number"},[e._v("2")]),o("br"),o("span",{staticClass:"line-number"},[e._v("3")]),o("br"),o("span",{staticClass:"line-number"},[e._v("4")]),o("br"),o("span",{staticClass:"line-number"},[e._v("5")]),o("br")])]),o("p",[e._v("This will first download the deployer image, which may take a few minutes depending on the speed of your Internet connection.\nThen, it will read your configuration files and start deployment.\nThis process will be entirely automatic, with the exception that at one stage, the deployer will display the mnemonic of your Airnode's private key.\nPlease note this down with pen and paper (do not copy paste to a text file on your computer) and keep it in a secure place.")]),e._v(" "),o("p",[e._v("Another point to mention is that the deployer will display your master wallet address, and ask you to deposit some ETH in it for it to create your provider record.\nFollow the instructions for your Airnode to create your provider record using your master wallet, and it will send any unused ETH to the "),o("code",[e._v("providerAdminForRecordCreation")]),e._v(" you have set in your "),o("code",[e._v("config.json")]),e._v(".\nYou can see the "),o("RouterLink",{attrs:{to:"/request-response-protocol/provider.html#creating-a-provider-record"}},[e._v("docs")]),e._v(" for more information about this process.")],1),e._v(" "),o("p",[e._v("A couple minutes after noting down your mnemonic and hitting "),o("code",[e._v("ENTER")]),e._v(", you should be done!\nThe deployer will output a receipt file ending with "),o("code",[e._v(".receipt.json")]),e._v(".\nThis file does not include any sensitive information, so feel free to share it as needed.\nThe receipt contains your "),o("RouterLink",{attrs:{to:"/request-response-protocol/provider.html#provideid"}},[o("code",[e._v("providerId")])]),e._v(", "),o("code",[e._v("providerIdShort")]),e._v(" and "),o("code",[e._v("masterWalletAddress")]),e._v(" that you will need to fund for it to create your provider record (if you have not already).\nYou will need to add your "),o("code",[e._v("providerIdShort")]),e._v(" to your "),o("code",[e._v("config.json")]),e._v(" to be able to redeploy your node with updated configurations.")],1),e._v(" "),o("p",[e._v("To find out how to redeploy your node or remove it from your cloud provider account, see the "),o("a",{attrs:{href:"https://github.com/api3dao/airnode/blob/master/Docker.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("deployer image docs"),o("OutboundLink")],1),e._v(".\nNow, the next step is to configure the authorization policies for the endpoints you will be serving.")]),e._v(" "),o("h2",{attrs:{id:"setting-authorizers"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#setting-authorizers"}},[e._v("#")]),e._v(" Setting authorizers")]),e._v(" "),o("p",[e._v("We are assuming that you have "),o("RouterLink",{attrs:{to:"/provider-guides/configuring-airnode.html"}},[e._v("configured your Airnode")]),e._v(" (and set "),o("code",[e._v("endpointId")]),e._v("s of your endpoints), and "),o("RouterLink",{attrs:{to:"/provider-guides/deploying-airnode.html"}},[e._v("deployed your Airnode")]),e._v(" and received your "),o("code",[e._v("providerId")]),e._v(" in your receipt file.\nRequesters who know your "),o("code",[e._v("providerId")]),e._v(" and "),o("code",[e._v("endpointId")]),e._v("s should now be able to make requests to your endpoints.\nHowever, you probably do not want to serve the entire public with your Airnode, but rather")],1),e._v(" "),o("ul",[o("li",[e._v("Only serve your own client contracts")]),e._v(" "),o("li",[e._v("Only serve requesters who have made a subscription payment")]),e._v(" "),o("li",[e._v("Only serve requesters who have gone through KYC")]),e._v(" "),o("li",[e._v("...")])]),e._v(" "),o("p",[e._v("In this guide, we will explain how you can achieve this.")]),e._v(" "),o("h3",{attrs:{id:"authorizers"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#authorizers"}},[e._v("#")]),e._v(" "),o("code",[e._v("authorizers")])]),e._v(" "),o("p",[o("RouterLink",{attrs:{to:"/request-response-protocol/general-structure.html#endpointstoresol"}},[o("code",[e._v("EndpointStore.sol")])]),e._v(" keeps a list of "),o("RouterLink",{attrs:{to:"/request-response-protocol/authorizer.html"}},[e._v("authorizer")]),e._v(" addresses for each "),o("code",[e._v("providerId")]),e._v("–"),o("code",[e._v("endpointId")]),e._v(" pair.\nAn authorizer is a contract that Airnode calls to check if it should respond to a specific request.\nIt can enforce any kind of authorization policy that one could implement as a contract.")],1),e._v(" "),o("h3",{attrs:{id:"default-state-deny-all"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#default-state-deny-all"}},[e._v("#")]),e._v(" Default state: Deny all")]),e._v(" "),o("p",[e._v("By default, the authorizers of all endpoints of a provider is an empty list.\nAn empty authorizers list means that endpoint is not allowed to be used by anyone.\nTherefore, after deploying your Airnode, you must also set authorizers for your endpoints for them to be accessible.")]),e._v(" "),o("h3",{attrs:{id:"allow-all"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#allow-all"}},[e._v("#")]),e._v(" Allow all")]),e._v(" "),o("p",[e._v("The simplest authorization policy is opening the endpoint to the public, so let us see how to do that first.\nAuthorizers being set to "),o("code",[e._v("[0]")]),e._v(" means that all requests made to it will be authorized (i.e., will be responded to by Airnode).\nOnly the "),o("code",[e._v("providerAdmin")]),e._v(" of a provider can update the authorizers of its endpoints.\nTherefore, you will need to make a transaction using the provider admin address (that you have set in "),o("code",[e._v("config.json")]),e._v(" as "),o("code",[e._v("providerAdminForRecordCreation")]),e._v(") to "),o("RouterLink",{attrs:{to:"/request-response-protocol/general-structure.html#endpointstoresol"}},[o("code",[e._v("EndpointStore.sol")])]),e._v(".\nIn JS (using ethers.js):")],1),e._v(" "),o("div",{staticClass:"language-js line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-js"}},[o("code",[e._v("airnode"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("connect")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("providerAdmin"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("updateEndpointAuthorizers")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("providerId"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" endpointId"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("ethers"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("constants"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("AddressZero"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[e._v("1")]),o("br")])]),o("p",[e._v("You can also use "),o("a",{attrs:{href:"https://github.com/api3dao/airnode/tree/master/packages/admin#update-authorizers",target:"_blank",rel:"noopener noreferrer"}},[o("code",[e._v("@api3/airnode-admin")]),o("OutboundLink")],1),e._v(" to update endpoint authorizers.")]),e._v(" "),o("p",[e._v("After making this transaction, your Airnode will respond to all requests.\nNote that being able to do this on-chain through "),o("code",[e._v("providerAdmin")]),e._v(" allows you to update your authorization policies without interacting with your Airnode or having to redeploy it.")]),e._v(" "),o("h3",{attrs:{id:"custom-authorization-policies"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#custom-authorization-policies"}},[e._v("#")]),e._v(" Custom authorization policies")]),e._v(" "),o("p",[e._v("We have mentioned that authorizer contracts can implement any arbitrary authorization logic.\nSee "),o("a",{attrs:{href:"https://github.com/api3dao/airnode/blob/master/packages/protocol/contracts/authorizers/MinBalanceAuthorizer.sol",target:"_blank",rel:"noopener noreferrer"}},[e._v("this example"),o("OutboundLink")],1),e._v(" where Airnode only responds to requests if the wallet it will use to fulfill the request has a balance more than an amount set by the provider admin.")]),e._v(" "),o("p",[e._v("The authorizer list allows you to combine single-purpose authorizer contracts to form complex policies as described in the "),o("RouterLink",{attrs:{to:"/request-response-protocol/authorizer.html#authorizer-list"}},[e._v("docs")]),e._v(".\nIf you would like to contribute to this set of authorizer contracts, please join the conversation in "),o("a",{attrs:{href:"https://github.com/api3dao/airnode/issues/38",target:"_blank",rel:"noopener noreferrer"}},[e._v("this issue"),o("OutboundLink")],1),e._v(".")],1),e._v(" "),o("h3",{attrs:{id:"conclusion-3"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#conclusion-3"}},[e._v("#")]),e._v(" Conclusion")]),e._v(" "),o("p",[e._v("Your Airnode is completly set up now.\nThe following guides will be on how a requester would be able to make requests to it.")])])}),[],!1,null,null,null);t.default=n.exports}}]);