(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{550:function(e,t,a){"use strict";a.r(t);var r=a(6),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[e._v("Check out the project source code here "),a("a",{attrs:{href:"https://github.com/api3dao/airnode-starter",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/api3dao/airnode-starter"),a("OutboundLink")],1)])]),a("p",[e._v("This project is composed of two steps:")]),e._v(" "),a("ol",[a("li",[e._v("Deploy an Airnode on Ropsten")]),e._v(" "),a("li",[e._v("Make a request to the deployed Airnode in a contract")])]),e._v(" "),a("p",[e._v("You can skip the first step and use the Airnode that we have deployed as well. You are recommended to read the contents of the scripts as you run them, and read the entire readme before starting.")]),e._v(" "),a("h2",{attrs:{id:"setup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setup"}},[e._v("#")]),e._v(" Setup")]),e._v(" "),a("p",[e._v("First, you need to create a Ropsten wallet with some ETH in it.")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("Clone this repo")])]),e._v(" "),a("li",[a("p",[e._v("Run the following to install the dependencies")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])]),e._v(" "),a("li",[a("p",[e._v("Run the following to build the contracts")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" run build\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])]),e._v(" "),a("li",[a("p",[e._v("Run the following to generate a wallet, whose mnemonic phrase will be displayed on the terminal and recorded in a "),a("code",[e._v(".env")]),e._v(" file at the project root.")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" run generate-wallet\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])]),e._v(" "),a("li",[a("p",[e._v("Install "),a("a",{attrs:{href:"https://metamask.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Metamask"),a("OutboundLink")],1),e._v(" to your web browser")])]),e._v(" "),a("li",[a("p",[e._v("Import the mnemonic phrase to Metamask")])]),e._v(" "),a("li",[a("p",[e._v("Use the "),a("a",{attrs:{href:"https://faucet.metamask.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("faucet"),a("OutboundLink")],1),e._v(" to get some Ropsten ETH")])])]),e._v(" "),a("p",[e._v("Then, you need to get a Ropsten provider URL. This will be used both by the deployed Airnode and by you while interacting with contracts. 1. Go to "),a("a",{attrs:{href:"https://infura.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Infura"),a("OutboundLink")],1),e._v(", create an account and get a Ropsten provider URL 2. Replace "),a("code",[e._v("https://ropsten.infura.io/v3/{YOUR_KEY}")]),e._v(" in your "),a("code",[e._v(".env")]),e._v(" file with the URL you got from Infura")]),e._v(" "),a("p",[e._v("Note that you can use any other provider or your own Ropsten node. However, if you will be deploying your own Airnode, the provider endpoint must be publicly accessible (i.e., "),a("code",[e._v("127.0.0.1:8545")]),e._v(" will not work).")]),e._v(" "),a("p",[a("em",[e._v("(You only need cloud credentials if you will not be skipping Step 1.)")])]),e._v(" "),a("p",[e._v("Follow the "),a("a",{attrs:{href:"https://github.com/api3dao/api3-docs/blob/master/provider-guides/deploying-airnode.md#creating-cloud-credentials",target:"_blank",rel:"noopener noreferrer"}},[e._v("docs"),a("OutboundLink")],1),e._v(" to create your cloud credentials. Place them at "),a("code",[e._v("/config/.env")]),e._v(", similar to "),a("a",{attrs:{href:"/config/example.env"}},[a("code",[e._v("/config/example.env")])]),e._v(". Do not confuse this "),a("code",[e._v(".env")]),e._v(" file with the one in the project root that keeps your mnemonic phrase and provider URL.")]),e._v(" "),a("h2",{attrs:{id:"step-1-deploy-an-airnode-on-ropsten"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-1-deploy-an-airnode-on-ropsten"}},[e._v("#")]),e._v(" Step 1: Deploy an Airnode on Ropsten")]),e._v(" "),a("p",[e._v("Normally, you would need to do two things before you deploy an Airnode: 1. "),a("a",{attrs:{href:"https://github.com/api3dao/api3-docs/blob/master/provider-guides/api-integration.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Specify the API integration"),a("OutboundLink")],1),e._v(" 1. "),a("a",{attrs:{href:"https://github.com/api3dao/api3-docs/blob/master/provider-guides/configuring-airnode.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Configure your Airnode"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("For this project, we specified a minimal integration to the popular and free "),a("a",{attrs:{href:"https://www.coingecko.com/en/api",target:"_blank",rel:"noopener noreferrer"}},[e._v("CoinGecko API"),a("OutboundLink")],1),e._v(", and prepared the configuration files to serve it over the Ropsten testnet. We only integrated a single API operation, "),a("code",[e._v("GET")]),e._v(" for "),a("code",[e._v("/coins/{id}")]),e._v(", which you can see below. The "),a("code",[e._v("localization")]),e._v(", "),a("code",[e._v("tickers")]),e._v(", "),a("code",[e._v("community_data")]),e._v(", "),a("code",[e._v("developer_data")]),e._v(" and "),a("code",[e._v("sparkline")]),e._v(" parameters are "),a("a",{attrs:{href:"https://github.com/api3dao/api3-docs/blob/master/provider-guides/api-integration.md#fixedoperationparameters",target:"_blank",rel:"noopener noreferrer"}},[e._v("fixed"),a("OutboundLink")],1),e._v(" as "),a("code",[e._v('"false"')]),e._v(", while "),a("code",[e._v("market_data")]),e._v(" is fixed as "),a("code",[e._v('"true"')]),e._v(". The "),a("code",[e._v("id")]),e._v(" parameter will be provided by the requester (e.g., "),a("code",[e._v('"ethereum"')]),e._v(") under the name "),a("code",[e._v("coinId")]),e._v(". You can make test calls over the "),a("a",{attrs:{href:"https://www.coingecko.com/en/api",target:"_blank",rel:"noopener noreferrer"}},[e._v("CoinGecko API docs"),a("OutboundLink")],1),e._v(" to see the response format.")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/19530665/103151070-be14ea00-478b-11eb-9608-a967c4282d9f.png",alt:""}})]),e._v(" "),a("p",[e._v("See "),a("a",{attrs:{href:"/config/config.example.json"}},[a("code",[e._v("config.example.json")])]),e._v(" for how this integration is achieved. We fixed the "),a("a",{attrs:{href:"https://github.com/api3dao/api3-docs/blob/master/provider-guides/api-integration.md#reservedparameters",target:"_blank",rel:"noopener noreferrer"}},[e._v("reserved parameters"),a("OutboundLink")],1),e._v(" to read the value from "),a("code",[e._v("market_data.current_price.usd")]),e._v(", cast it as an "),a("code",[e._v("int256")]),e._v(" and multiply it by "),a("code",[e._v("1,000,000")]),e._v(" before returning. No security scheme (i.e., API key) is defined in "),a("code",[e._v("config.json")]),e._v(" or "),a("a",{attrs:{href:"/config/security.json"}},[a("code",[e._v("security.json")])]),e._v(" because the CoinGecko API is publicly accessible.")]),e._v(" "),a("h3",{attrs:{id:"customize-your-config-json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#customize-your-config-json"}},[e._v("#")]),e._v(" Customize your "),a("code",[e._v("config.json")])]),e._v(" "),a("p",[e._v("Run the following to insert the contents of "),a("code",[e._v(".env")]),e._v(" to "),a("code",[e._v("config/config.example.json")]),e._v(" and save it as "),a("code",[e._v("config/config.json")])]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" run customize-config\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"deploy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deploy"}},[e._v("#")]),e._v(" Deploy")]),e._v(" "),a("p",[e._v("Now your "),a("code",[e._v("/config")]),e._v(" directory should have the required "),a("a",{attrs:{href:"https://github.com/api3dao/api3-docs/blob/master/airnode/config-json.md",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("config.json")]),a("OutboundLink")],1),e._v(", "),a("a",{attrs:{href:"https://github.com/api3dao/api3-docs/blob/master/airnode/security-json.md",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("security.json")]),a("OutboundLink")],1),e._v(" and "),a("a",{attrs:{href:"https://github.com/api3dao/api3-docs/blob/master/provider-guides/deploying-airnode.md#creating-cloud-credentials",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v(".env")]),a("OutboundLink")],1),e._v(" files. Run the following to deploy your node:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" config\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The deployer has to be run in the directory where the configuration files are")]),e._v("\ndocker run -it --rm "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --env-file .env "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --env "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("COMMAND")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("deploy-first-time "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  -v "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("pwd")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(":/airnode/out "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  api3/airnode:latest\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("p",[e._v("This will output a receipt file with the extension "),a("code",[e._v(".receipt.json")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"fund-your-master-wallet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fund-your-master-wallet"}},[e._v("#")]),e._v(" Fund your master wallet")]),e._v(" "),a("p",[e._v("Run the following to send your master wallet 0.1 ETH for it to "),a("a",{attrs:{href:"https://github.com/api3dao/api3-docs/blob/master/request-response-protocol/provider.md#creating-a-provider-record",target:"_blank",rel:"noopener noreferrer"}},[e._v("create a provider record"),a("OutboundLink")],1),e._v(" for you on-chain.")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" run fund-master-wallet\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("Your deployed Airnode will use these funds to make the transaction that will create the provider record on Ropsten, and send the leftover ETH back to your address automatically.")]),e._v(" "),a("h3",{attrs:{id:"make-your-endpoint-publicly-accessible"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#make-your-endpoint-publicly-accessible"}},[e._v("#")]),e._v(" Make your endpoint publicly accessible")]),e._v(" "),a("p",[a("code",[e._v("config.json")]),e._v(" defines an "),a("a",{attrs:{href:"https://github.com/api3dao/api3-docs/blob/master/request-response-protocol/endpoint.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("endpoint"),a("OutboundLink")],1),e._v(" named "),a("code",[e._v("coinMarketData")]),e._v(", whose "),a("a",{attrs:{href:"https://github.com/api3dao/api3-docs/blob/master/request-response-protocol/endpoint.md#endpointid",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("endpointId")]),a("OutboundLink")],1),e._v(" is "),a("code",[e._v("0xf466b8feec41e9e50815e0c9dca4db1ff959637e564bb13fefa99e9f9f90453c")]),e._v(". Endpoints are not publicly accessible by default, so you will have to make a transaction for this. Run the following to set your endpoint's "),a("a",{attrs:{href:"https://github.com/api3dao/api3-docs/blob/master/request-response-protocol/authorizer.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("authorizers"),a("OutboundLink")],1),e._v(" to "),a("code",[e._v("[0x0000000000000000000000000000000000000000]")]),e._v(", which makes it "),a("a",{attrs:{href:"https://github.com/api3dao/api3-docs/blob/master/provider-guides/setting-authorizers.md#allow-all",target:"_blank",rel:"noopener noreferrer"}},[e._v("publicly accessible"),a("OutboundLink")],1),e._v(":")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" run update-authorizers\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h2",{attrs:{id:"step-2-make-a-request"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-2-make-a-request"}},[e._v("#")]),e._v(" Step 2: Make a request")]),e._v(" "),a("p",[e._v("The scripts in this step will use the Airnode you have deployed if you have completed Step 1. Otherwise, it will use the "),a("code",[e._v("providerId")]),e._v(" of the Airnode that we have deployed given in "),a("a",{attrs:{href:"/src/parameters.js"}},[a("code",[e._v("parameters.js")])]),e._v(". Note that the "),a("code",[e._v("endpointId")]),e._v(" will be the same either way because it is "),a("a",{attrs:{href:"https://github.com/api3dao/api3-docs/blob/master/request-response-protocol/endpoint.md#endpointid",target:"_blank",rel:"noopener noreferrer"}},[e._v("derived from the OIS and endpoint name"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"create-a-requester"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-a-requester"}},[e._v("#")]),e._v(" Create a requester")]),e._v(" "),a("p",[e._v("Run the following to create an on-chain "),a("a",{attrs:{href:"https://github.com/api3dao/api3-docs/blob/master/request-response-protocol/requester.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("requester"),a("OutboundLink")],1),e._v(" record:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" run create-requester\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("You can use this requester denoted with an index in other projects as well. Note that "),a("code",[e._v("requesterIndex")]),e._v(" is chain-specific, so you will have to create another requester record on other chains.")]),e._v(" "),a("h3",{attrs:{id:"deploy-the-client-contract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deploy-the-client-contract"}},[e._v("#")]),e._v(" Deploy the client contract")]),e._v(" "),a("p",[e._v("Run the following to deploy "),a("code",[e._v("ExampleClient.sol")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" run deploy-client\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"endorse-the-client"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#endorse-the-client"}},[e._v("#")]),e._v(" Endorse the client")]),e._v(" "),a("p",[e._v("Run the following to "),a("a",{attrs:{href:"https://github.com/api3dao/api3-docs/blob/master/request-response-protocol/endorsement.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("endorse"),a("OutboundLink")],1),e._v(" your deployed "),a("a",{attrs:{href:"https://github.com/api3dao/api3-docs/blob/master/request-response-protocol/client.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("client"),a("OutboundLink")],1),e._v(" contract using the requester you have created:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" run endorse-client\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"derive-and-fund-the-designated-wallet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#derive-and-fund-the-designated-wallet"}},[e._v("#")]),e._v(" Derive and fund the designated wallet")]),e._v(" "),a("p",[e._v("First run the following to derive the "),a("a",{attrs:{href:"https://github.com/api3dao/api3-docs/blob/master/request-response-protocol/designated-wallet.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("designated wallet"),a("OutboundLink")],1),e._v(" for the provider–requester pair:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" run derive-designated-wallet-address\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("and then fund this designated wallet with 0.1 ETH:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" run fund-designated-wallet\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("The requests that the client contract will make will be funded by this 0.1 ETH. Note that you may have to run "),a("code",[e._v("fund-designated-wallet")]),e._v(" again if you make too many requests and use up this 0.1 ETH (unlikely on Ropsten because the gas price is low).")]),e._v(" "),a("h3",{attrs:{id:"make-a-request"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#make-a-request"}},[e._v("#")]),e._v(" Make a request")]),e._v(" "),a("p",[e._v("Run the following to make a request:")]),e._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm run make-request\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("which should be fulfilled by the Airnode and printed out on the terminal. Note that now that the price is on-chain, you can use it in your contract to implement any arbitrary logic.")]),e._v(" "),a("p",[e._v("Try replacing the "),a("code",[e._v("coinId")]),e._v(" value in "),a("a",{attrs:{href:"/scripts/make-request.js"}},[a("code",[e._v("make-request.js")])]),e._v(" from "),a("code",[e._v('"ethereum"')]),e._v(" to "),a("code",[e._v('"bitcoin"')]),e._v(" and make another request. You can see the API docs to see which coin IDs are supported.")]),e._v(" "),a("h2",{attrs:{id:"conclusion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion")]),e._v(" "),a("p",[e._v("You deployed an Airnode, made a request to it and received the response at the contract. If you want to learn more, see the following resources:")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/api3dao/api3-whitepaper",target:"_blank",rel:"noopener noreferrer"}},[e._v("API3 whitepaper"),a("OutboundLink")],1),e._v(" will give you a broad overview of the project")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/api3dao/api3-docs/blob/master/medium.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Medium posts"),a("OutboundLink")],1),e._v(" are a more digestible version of the whitepaper")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/api3dao/api3-docs",target:"_blank",rel:"noopener noreferrer"}},[e._v("API3 docs"),a("OutboundLink")],1),e._v(" will provide you with the theory of how Airnode and its protocol works")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/api3dao/airnode-admin",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("airnode-admin")]),a("OutboundLink")],1),e._v(" lets you interact with the Airnode contract (to create a request, endorse a client, etc.) using a CLI tool")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/api3dao/airnode-client-examples",target:"_blank",rel:"noopener noreferrer"}},[e._v("Airnode client examples"),a("OutboundLink")],1),e._v(" demonstrate different request patterns that the Airnode protocol supports (for example, we used a full request in this starter project)")])])])}),[],!1,null,null,null);t.default=n.exports}}]);